#util
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir := $(notdir $(patsubst %/,%,$(dir $(mkfile_path))))

Target ?= $(WHBS_BUILD_OEM_STR)_$(WHBS_BUILD_MODEL_STR)
Target_path = project_linux/$(Target)
WTarget_path = ../../../../console/project_window/$(Target)

#To enable -j4 option, cd and make.
all: $(Target_path)
alll: all ccc
 
clean distclean:
	cd $(Target_path) && make $@

$(Target_path) $(WTarget_path): %$(Target): %$(Target)/Makefile
	time make -j4 -C$@
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo "	$(Target) done."
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

$(Target_path)/Makefile: $(Target_path)/$(Target).pro
	cd $(dir $@) && qmake-qt4

$(WTarget_path)/Makefile: $(WTarget_path)/$(Target).pro
	cd $(dir $@) && mingw32-qmake-qt4

qm: language/ml_korean.qm

language/ml_korean.qm: lupdate project_linux/ts/ml_korean.ts
	[ -d language ] || mkdir language
	lrelease-qt4 project_linux/ts/*.ts
	mv project_linux/ts/*.qm language

lupdate:
	lupdate-qt4 $(Dirs:%=%/*.pro) -ts project_linux/ts/*.ts -locations none -no-obsolete

lupdate.loc: Ts = project_linux/ts
lupdate.loc: Loc = project_linux/ts/loc
lupdate.loc:
	[ -d $(Loc) ] || mkdir $(Loc)
	cp $(Ts)/*.ts $(Loc)
	lupdate-qt4 $(Dirs:%=%/*.pro) -ts $(Loc)/*.ts -locations relative -no-obsolete

lupdate.obsolete:
	lupdate-qt4 $(Dirs:%=%/*.pro) -ts project_linux/ts/*.ts -locations none
	
install: all
	$(CROSS_COMPILE)strip $(Target_path)/$(Target)	-o ../../../../bin/$(Target)/console_exe/conmain

lswin:
	ls -l ../../../../bin/$(Target)/cc_config

#ccconfig
ccc: $(WTarget_path)

cccc: ccc
	cd $(WTarget_path) && eee s

#
#	build console
#
build: Bin_path = ../../../../bin
build: Qt_lib = $(Bin_path)/$(Target)/qt_lib
build: all ccc qm
	mkdir -p $(Bin_path)/$(Target)/console_exe $(Bin_path)/$(Target)/config_xml $(Bin_path)/$(Target)/lang_qm $(Bin_path)/$(Target)/cc_config
	if [ -d $(Qt_lib) ]; then echo qt_lib ok; else ln -s ../../qt/lib $(Qt_lib); fi
	$(CROSS_COMPILE)strip $(Target_path)/$(Target) -o $(Bin_path)/$(Target)/console_exe/conmain
	cp language/*.qm $(Bin_path)/$(Target)/lang_qm/ -f
	cp $(Target_path)/*.xml $(Bin_path)/$(Target)/config_xml/ -f
#version
	cd $(Bin_path)/$(Target)/config_xml/&&\
	sed -i '/general_fw_version/,/general_fw_version/ s:<string>.*</string>:<string>'${WHBS_BUILD_VERSION}'</string>:' dvrconfig_default.xml 
	
#ccconfig
	[ -d bld.ccconfig ] || mkdir bld.cconfig
	cp $(WTarget_path)/release/config.exe bld.ccconfig -f
	cp $(Target_path)/systemlog_default.xml bld.ccconfig/systemlog.xml -f
	cp $(Target_path)/dvrconfig_default.xml bld.ccconfig/dvrconfig.xml -f
	cp $(Target_path)/dvrconfig_recordcapacity_default.xml bld.ccconfig/dvrconfig_recordcapacity.xml -f
	cp $(Target_path)/consolestate_default.xml bld.ccconfig/consolestate.xml -f
	cp language/*.qm bld.ccconfig
	zip -j $(Bin_path)/$(Target)/cc_config/config.zip bld.ccconfig/*

#
# Checking xmls
#
xmlok: xml.syntax xml.etc
	@echo -e "\nXMLs are good.\n"

xml.syntax:
	@echo ~~~~~~ The XML inspections begins ~~~~~~
	xmllint --noout $(Dirs:%=%/*.xml)
	@echo -e "XML syntax -> OK\n\n"

xml.etc: Pocdvrs = $(filter %pd %pdr,$(Dirs))
xml.etc: Cocdvrs = $(sort $(filter project_linux/webgate_ht%,$(Dirs)) $(Pocdvrs))
xml.etc: tt1=$(shell find project_linux -name *.xml|xargs grep general_cocdvr|gawk -F: '{print $$1}'|sort)
xml.etc: Raiddvrs = $(filter %r,$(Dirs))
xml.etc: tt3=$(shell find project_linux -name *.xml|xargs grep general_raiddvr|gawk -F: '{print $$1}'|sort)
xml.etc: tt4=$(shell find project_linux -name *.xml|xargs grep "raid\sfail"|gawk -F: '{print $$1}'|uniq|sort)
xml.etc:
	@echo "1. Checking general_cocdvr tag with model name"
	@[[ "$(Cocdvrs:%=%/dvrconfig_added.xml)" = "$(tt1)" ]]
	@echo " -> OK"
	
	@echo "2. The ptz port of coc dvr is 3, the othres is 0."
	@$(foreach dir,$(Dirs),\
		ptzport=`xmltt -t camera_ptzport $(dir)/dvrconfig_default.xml`;\
		correct=`xmltt -q -t general_cocdvr $(dir)/dvrconfig_added.xml && echo 3 || echo 0`;\
		echo -n "ptz port is $$ptzport and must be $$correct -> ";\
		[[ "$$ptzport" = "$$correct" ]] || exit 1;\
		echo OK;)
	@echo
	
	@echo "3. Checking general_raiddvr tag with model name"
	@[[ "$(Raiddvrs:%=%/dvrconfig_added.xml)" = "$(tt3)" ]]
	@echo -e " -> OK\n\n"

	@echo "4. Checking event_actions_sourcesystem tag~'raid fail' attribute with general_raiddvr tag"
	@[[ "$(tt3)" = "$(tt4)" ]]
	@echo -e " -> OK\n\n"

#
# Batch build
#
Dirs := $(filter-out %.pro,$(wildcard project_linux/[nw]*_*))
Models = $(Dirs:project_linux/%=%)
WDirs = $(addprefix ../../../../console/project_window/,$(Models))

~~all: xmlok $(Models)
	echo $(Dirs) done!

$(Models):
	make Target=$@
	make ccc Target=$@

~~distclean:
	$(Dirs:%=pushd .&&cd %&&qmake-qt4&&make distclean&&qmake-qt4;popd&&) echo Done!
	$(WDirs:%=pushd .&&cd %&&mingw32-qmake-qt4&&make distclean&&mingw32-qmake-qt4;popd&&) echo Done!

.PHONY: all clean xmlok xml.syntax xml.etc qm ccconfig $(Models) $(Target_path) $(WTarget_path)\
	~~all ~~distclean

#
# Appendix: Derivatives
#
Derivatives = $(Nobrands) $(WDCs)
Nobrands = hdr08m~hsc801fd hdr16l~hs1600fd hdr16m~hsc1601fd		#same h/w, f/w
WDCs = wdc0108fe~hsc801fd wdc0116fe~hsc1601fd wdc0216fe~hs1600fd	#same h/w
Grundigs = grxk4416a~hs1600fd										#fossil	model

#
# tests
#
test:
	echo $(CURDIR)
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	echo $(MAKEFLAGS)
	echo $(MAKELEVEL)
	make ttt -C tt -f ../Makefile

ttt:
	echo ~~~ttt~~~
	echo $(MAKEFLAGS)
	echo $(MAKELEVEL)
