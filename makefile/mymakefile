#
#	Onvif server
#

CXX = $(CROSS_COMPILE)g++
CC = $(CROSS_COMPILE)gcc
AR = $(CROSS_COMPILE)ar
STRIP = $(CROSS_COMPILE)strip

CPPFLAGS = -Ibm -Ionvif -I. -Iwgi -isystem $(Boost_include) -MMD
CXXFLAGS = -O1 -std=c++0x -g3
CFLAGS = -O1 -g3
LDLIBS = -lpthread
LINK.o = $(LINK.cc)	#use g++ as linker
Boost_lib = /opt/lib/boost.arm/lib
Boost_include =/opt/lib/boost.arm/include

TARGET = nvt
Bm_objs = word_analyse.o util.o sys_os.o sys_log.o sys_buf.o ppstack.o base64.o sha1.o
Onvif_objs = xml_node.o soap.o onvif_probe.o onvif_pkt.o onvif.o hxml.o http_rx.o \
	soap_parser.o onvif_device.o http_parse.o http_cln.o onvif_timer.o onvif_event.o \
	onvif_api.o onvif_ptz.o onvif_util.o onvif_media.o onvif_image.o onvif_cm.o
Wgi_objs = ipc.o conf.o
OBJS = $(Bm_objs:%=bm/%) $(Onvif_objs:%=onvif/%) $(Wgi_objs:%=wgi/%) $(TARGET).o
DEPS = $(OBJS:%.o=%.d)

all: $(TARGET)

$(TARGET): $(OBJS)

install: all
	$(STRIP) $(TARGET) -o ../../../../build/bin/$(TARGET)

test: SRCS := $(OBJS:%.o=%.cpp)
test:
	$(CXX) $(CPPFLAGS:-MMD=) $(CXXFLAGS) -MM $(SRCS)

clean:
	rm -f $(TARGET) $(OBJS) $(DEPS)

.PHONY: all install clean

#include dependencies if it exists.
# -MMD cpp option generate '~.d' file.
# -isystem <DIR> cpp option avoids -MMD option
-include $(DEPS)

#util
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir := $(notdir $(patsubst %/,%,$(dir $(mkfile_path))))
lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))
