#
#	pts makefile
#
CPPFLAGS = -isystem $(Boost_include) -MMD
CFLAGS = -g $(Sanitizer_flags) -DDeployment
CXXFLAGS = $(CFLAGS) -std=c++11
LDLIBS = $(Sanitizer_flags) -ldl -lssl -lcrypto
LINK.o = $(LINK.cc)	#use g++ as linker
DEPS = $(TARGET:%=%.d)
Sanitizer_flags = -fsanitize=address -fno-omit-frame-pointer

TARGET = rsatt1 rsatt2 ttatt mytt #mkcert osslcli evp-symmetric-encrypt #evp-encrypt openssl_aes

all: $(TARGET)

run: $(TARGET)
	./$<

#ttatt: ttatt.o tta_util.o crypt-base64.o mkcert.o

test:
	$(CXX) $(CPPFLAGS:-MMD=) $(CXXFLAGS) -MM $(SRCS)
	
tt:
	@echo $(.FEATURES)

clean:
	rm -f $(TARGET) $(OBJS) $(DEPS)

.PHONY: all install clean

#include dependencies if it exists.
# -MMD cpp option generate '~.d' file.
# -isystem <DIR> cpp option avoids -MMD option
-include $(DEPS)

#util
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir := $(notdir $(patsubst %/,%,$(dir $(mkfile_path))))
lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))
